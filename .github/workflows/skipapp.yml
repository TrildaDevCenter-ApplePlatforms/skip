# This workflow is meant to be called remotely from a Skip app project.
#
# The action will build and test both the Swift and Gradle projects 
# transpiled through Skip.
#
# When tagged with a semantic version (e.g., "1.2.3"), the action will
# create and distribute release .apk and .ipa artifacts from the project.
#
# An example invocation script is as follows, which runs for 
# every push, every PR, every semver tag, and every day at noon GMT:
#
# name: skipapp
# on:
#   push:
#     branches: '*'
#     tags: "[0-9]+.[0-9]+.[0-9]+"
#   schedule:
#     - cron: '0 12 * * *'
#   workflow_dispatch:
#   pull_request:
# 
# permissions:
#   contents: write
# 
# jobs:
#   call-workflow:
#     uses: skiptools/skip/.github/workflows/skipapp.yml@main
# 
name: "Skip App Workflow"
on:
  workflow_call:
jobs:
  skipapp:
    runs-on: macos-13
    env:     
      DEVELOPER_DIR: /Applications/Xcode_15.0.app/Contents/Developer
    steps:
      - run: brew update
      - run: brew install skiptools/skip/skip
      - uses: actions/checkout@v3
      - name: Environment
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "APP_VERSION=${TAG:-'0.0.0'}" > $GITHUB_ENV
          echo "COMMIT_DATE=$(git log -1 --format=%ad --date=iso-strict ${GITHUB_REF#refs/tags/})" > $GITHUB_ENV
          sed -i '' "s;MARKETING_VERSION = .*;MARKETING_VERSION = $(git describe --tags --abbrev=0 --match '[0-9]*\.[0-9]*\.[0-9]*' --first-parent);g" App.xcconfig
          sed -i '' "s;PRODUCT_VERSION = .*;PRODUCT_VERSION = $(git rev-list --count HEAD);g" App.xcconfig

      - name: Run Tests
        run: swift test

      - name: Build ipa
        run: |
          mkdir -p Skip/build/artifacts
          APPARTIFACT="App"
          export NOSKIP=1
          for CONFIGURATION in "Debug" "Release"; do
            ARCHIVE_PATH=".build/Skip/artifacts/${CONFIGURATION}/${APPARTIFACT}.xcarchive"
            xcodebuild -derivedDataPath .build/DerivedData -skipPackagePluginValidation -archivePath "${ARCHIVE_PATH}" -configuration "${CONFIGURATION}" -scheme "App" -sdk "iphoneos" -destination "generic/platform=iOS" -jobs 1 archive CODE_SIGNING_ALLOWED=NO
            cd "${ARCHIVE_PATH}"/Products/
            find . -type f
            mv "Applications" "Payload"
            # create zip file with reproducible timestamps
            find "Payload" -exec touch -t 197001010000 {} \;
            zip -9 -r "${APPARTIFACT}-${CONFIGURATION}.ipa" "Payload"

            cd -
            cp -av "${ARCHIVE_PATH}/Products/${APPARTIFACT}-${CONFIGURATION}.ipa" Skip/build/artifacts/
          done

      - name: Build apk
        run: |
          for CONFIGURATION in "Release" "Debug"; do
            BUILT_PRODUCTS_DIR=".build" xcodebuild -derivedDataPath .build/DerivedData -skipPackagePluginValidation -configuration "${CONFIGURATION}" -destination "platform=macosx" -scheme "SkipApp" build SKIP_LAUNCH_APK="NO"
          done
          ls -la Skip/build/
          ls -la Skip/build/artifacts/
          ls -lah Skip/build/artifacts/*.apk
          shasum -a 256 Skip/build/artifacts/*.apk

      - name: Assemble Swift Source
        run: |
          # create the source zip file with predictable timestamps for reproducibility
          find . -exec touch -d "${COMMIT_DATE:0:19}" {} \;
          mkdir -p Skip/build/artifacts/
  
          # create 2 zips: one with the Package.resolved for reproducibility,
          zip -9 -r "Skip/build/artifacts/App-Source.zip" . -x "Skip/*" -x ".*/*"

          # and the other without the Package.resolved for templating.
          TEMPLATE_FILE="Skip/build/artifacts/skip-template-source.zip"
          zip -9 -r "${TEMPLATE_FILE}" . -x "Package.resolved" -x "Skip/*" -x ".git/*" -x ".build/*" -x ".swiftpm/*"

          # verify that the template can be used to derive a new app
          #skip create --template-file "${TEMPLATE_FILE}" --build --test $(mktemp -d)


      - name: Assemble Kotlin Source
        run: |
          # the primary skip module is the first target of the first product
          SKIP_MODULE=$(swift package dump-package | jq -r '.products[0].targets[0]')
          cd .build/DerivedData/SourcePackages/plugins/*.output/${SKIP_MODULE}/skipstone/
          rm -rf .gradle .build */.build
          # create the zip file with predictable timestamps for reproducibility
          find . -exec touch -d "${COMMIT_DATE:0:19}" {} \;
          zip -9 -r "${OLDPWD}/Skip/build/artifacts/App-android-source.zip" . -x ".build/*" -x "*/.gradle/*" -x "*/.build/*" -x "*/build/*"
          cd -

      - name: Prepare Artifacts
        run: |
          APPNAME="App"
          SKIP_MODULE=$(swift package dump-package | jq -r '.products[0].targets[0]')
          # merge the ipa and apk zips into a single archive
          cd Skip/build/artifacts/
          ls -la

          IPA="${APPNAME}-Release.ipa"
          APK="${SKIP_MODULE}UI-release.apk"
          APPZ="${SKIP_MODULE}.appz"

          TMPDIR=$(mktemp -d)
          unzip -q "$IPA" -d "$TMPDIR"
          cp "${APK}" "${TMPDIR}/.source.apk"
          cd "${TMPDIR}"
          zip -qr9 ".source.apk" ./*
          cd -

          mv "${TMPDIR}/.source.apk" "${APPZ}"
          shasum -a 256 ${APK} ${IPA} ${APPZ}
          ls -lah ${APK} ${IPA} ${APPZ}

          # fix artifact names for release (retain App-Source.zip for template)
          mv -v ${APPNAME}-Source.zip ${SKIP_MODULE}-ios-${TAG}-source.zip
          mv -v ${SKIP_MODULE}UI-release.apk ${SKIP_MODULE}-android-${TAG}.apk
          #mv -v ${SKIP_MODULE}UI-debug.apk ${SKIP_MODULE}-android-${TAG}-debug.apk
          mv -v ${APPNAME}-Release.ipa ${SKIP_MODULE}-ios-${TAG}.ipa
          mv -v ${APPNAME}-Debug.ipa ${SKIP_MODULE}-ios-${TAG}-debug.ipa
          mv -v ${APPNAME}-android-source.zip ${SKIP_MODULE}-android-${TAG}-source.zip
          mv -v ${APPNAME}.appz ${SKIP_MODULE}-${TAG}.appz

          # move debug build out of release candidates
          mkdir debug
          mv *-debug.* debug/
          mv *.appz debug/


      - name: "Release"
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "Creating release: ${TAG}"
          cd Skip/build/artifacts/

          shasum -a 256 *.* > checksums.txt
          gh release create "${TAG}" -t "Release ${TAG}" --generate-notes *.*

      - name: "Verify Release Templae"
        run: skip create --template-file Skip/build/artifacts/skip-template-source.zip --build --test SomeApp

      - name: "Upload Build Artifacts"
        # upload the artifacts generated from each build
        uses: actions/upload-artifact@v3
        if: always()
        with: 
          path: Skip/build/artifacts/

