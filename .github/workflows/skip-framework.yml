name: "Skip Framework CI"
on:
  workflow_call:
jobs:
  skip-framework:
    runs-on: macos-13
    timeout-minutes: 60
    env:     
      DEVELOPER_DIR: /Applications/Xcode_15.0.app/Contents/Developer
    steps:
      - run: brew update

      - run: brew install skiptools/skip/skip

      - uses: actions/checkout@v3

      - name: Local Skip Tests
        run: skip test || skip test --verbose

      - name: Connected iOS Simulator Tests
        run: |
          # attempt twice due to flaky errors: "Failed to create a bundle instance representing '~/Library/Developer/Xcode/DerivedData/skip-lib-eptgwklaklbhhcgdbdcwrvnjxzhm/Build/Products/debug/SkipLibTests.xctest'. Check that the bundle exists on disk."
          xcodebuild test -jobs 1 -sdk iphonesimulator -destination "platform=iOS Simulator,name=iPhone 14" -skipPackagePluginValidation -configuration debug -scheme $(basename $PWD) || xcodebuild test -jobs 1 -sdk iphonesimulator -destination "platform=iOS Simulator,name=iPhone 14" -skipPackagePluginValidation -configuration debug -scheme $(basename $PWD)

      - name: Setup Android
        run: |
          PACKAGE=$(swift package dump-package | jq -r '.name')
          MODULE=$(swift package dump-package | jq -r '.targets[0].name')
          cd .build/
          ln -vs plugins/outputs/${PACKAGE}/${MODULE}Tests/skipstone android-tests
          cd android-tests/
          # ensure we can write to the foldr
          chmod -Rf +w .
          # create the "gradlew" wrapper if it does not already exist
          gradle wrapper

      - name: Cache Android snapshot
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-30-aosp-atd

      - name: Create Android snapshot
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          target: aosp_atd
          api-level: 30
          arch: x86
          channel: canary
          profile: pixel
          avd-name: Pixel_3a_API_30
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching"

      - name: Connected Android Emulator Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          target: aosp_atd
          api-level: 30
          arch: x86
          channel: canary
          profile: pixel
          #profile: Galaxy Nexus
          avd-name: Pixel_3a_API_30
          script: adb logcat *:S TestRunner:V & ./gradlew connectedCheck --stacktrace

      # disabled while testing cached AVD
      - name: Connected Android Emulator Tests OLD
        if: false
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          working-directory: .build/android-tests
          # times out frequently
          #api-level: 29
          api-level: 31
          target: default
          arch: x86_64
          profile: Galaxy Nexus
          force-avd-creation: false
          disable-animations: true
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: adb logcat *:S TestRunner:V & ./gradlew connectedCheck --stacktrace
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # extract package and initial module name from Package.swift
          PACKAGE=$(swift package dump-package | jq -r '.name')
          test -n "${PACKAGE}"
          MODULE=$(swift package dump-package | jq -r '.targets[0].name')
          test -n "${MODULE}"
          COMMIT_DATE=$(git log -1 --format=%ad --date=iso-strict ${GITHUB_REF#refs/tags/})
          test -n "${COMMIT_DATE}"

          # the tag is the most recent GitHub ref
          TAG="${GITHUB_REF#refs/tags/}"
          test -n "${TAG}"

          gradle assemble --project-dir .build/plugins/outputs/${PACKAGE}/${MODULE}Tests/skipstone -PbuildDir=.build/${MODULE}

          echo "Creating release: ${TAG}"
          mkdir -p Skip/build/artifacts/
          PKGDIR="../../../../../../Skip/build/artifacts/"

          brew install tree
          tree ./.build/plugins/outputs/

          # create the release .aar
          cd ./.build/plugins/outputs/${PACKAGE}/${MODULE}Tests/skipstone
          cp -a ${MODULE}/.build/${MODULE}/outputs/aar/${MODULE}-release.aar ${PKGDIR}/${PACKAGE}-${TAG}.aar
          # copy the license for the source jar
          cp ../../../../../../LICENSE* .

          # create a source .jar distribution with consistent timestamps
          find . -exec touch -d "${COMMIT_DATE:0:19}" {} \;

          zip -r ${PKGDIR}/${PACKAGE}-${TAG}-sources.jar . -x '.*' -x 'build/*' -x '*/build' -x '*/build/*' -x '.*/*' -x '*/.*/*'

          # create a release with the assets and a checksums.txt file
          cd ${PKGDIR}
          shasum -a 256 *.* > checksums.txt
          gh release create "${TAG}" -t "Release ${TAG}" --generate-notes *.*
          #echo 'Release artifact SHA-256 hashes:' >> .relnotes
          #echo '```' >> .relnotes
          #cat checksums.txt >> .relnotes
          #echo '```' >> .relnotes
          #gh release create "${TAG}" -t "Release ${TAG}" -F .relnotes *.*

